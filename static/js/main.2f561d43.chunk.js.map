{"version":3,"sources":["api/api.js","constants/actionTypes.js","actions/actions.js","thunks/thunks.js","components/Search/Search.jsx","components/CityCard/CityCard.jsx","components/WeatherDisplay/WeatherDisplay.jsx","components/HelloCodica/HelloCodica.jsx","App.js","reducers/cities.js","reducer.js","store.js","index.js"],"names":["currentWeatherAPI","city","axios","get","ADD_CITY","REMOVE_CITY","UPDATE_CITY","addCity","number","type","getCity","dispatch","then","res","status","data","Search","useState","searchValue","setSearchValue","searchError","setSearchError","isFetching","setIsFetching","citiesLength","useSelector","state","cities","length","history","useHistory","useDispatch","searchCity","response","cod","push","name","cityName","myCities","JSON","parse","window","localStorage","getItem","setItem","stringify","addCityToLocalStorage","catch","error","message","Form","onSubmit","event","preventDefault","Row","Col","xs","FormControl","placeholder","value","onChange","target","Button","variant","disabled","Spinner","as","animation","size","role","aria-hidden","onClick","className","CityCard","props","cityData","weather","iconURL","icon","Card","Body","Title","Subtitle","main","src","alt","Text","temp","feels_like","wind","speed","updateCity","newList","filter","removeCityFromLocalStorage","location","pathname","console","log","WeatherDisplay","useParams","weatherData","find","temp_min","temp_max","humidity","HelloCodica","App","useEffect","i","getCitiesFromLocalStorage","Container","Nav","sort","a","b","map","index","NavItem","to","path","exact","initialState","reducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.2f561d43.chunk.js","sourcesContent":["import axios from \"axios\";\r\n\r\nexport const currentWeatherAPI = {\r\n    getCurrentWeather(city) {\r\n        return axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=6153f58f351c52df740659b887409431&units=metric`)\r\n    }\r\n}","export const ADD_CITY = 'ADD_CITY';\r\nexport const REMOVE_CITY = 'REMOVE_CITY';\r\nexport const UPDATE_CITY = 'UPDATE_CITY';","import {ADD_CITY, REMOVE_CITY, UPDATE_CITY} from \"../constants/actionTypes\";\r\n\r\nexport const addCity = (city, number) => {\r\n    return {\r\n        type: ADD_CITY,\r\n        city,\r\n        number\r\n    }\r\n}\r\n\r\nexport const removeCity = (name) => {\r\n    return {\r\n        type: REMOVE_CITY,\r\n        name\r\n    }\r\n}\r\n\r\nexport const updateCity = (city) => {\r\n    return {\r\n        type: UPDATE_CITY,\r\n        city\r\n    }\r\n}","import {currentWeatherAPI} from \"../api/api\";\r\nimport {addCity} from \"../actions/actions\";\r\n\r\nexport const getCity = (city, number) => dispatch => {\r\n    currentWeatherAPI.getCurrentWeather(city).then(res => {\r\n        if (res.status === 200) {\r\n            dispatch(addCity(res.data, number))\r\n        }\r\n    })\r\n}","import {Button, Col, Form, FormControl, Spinner} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport {currentWeatherAPI} from \"../../api/api\";\r\nimport '../../App.css'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {addCity} from \"../../actions/actions\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst Search = () => {\r\n    const [searchValue, setSearchValue] = useState(\"\")\r\n    const [searchError, setSearchError] = useState(\"\")\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const citiesLength = useSelector(state => state.cities.cities.length)\r\n    const history = useHistory()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onSearchChange = (event) => {\r\n        setSearchValue(event.target.value)\r\n    }\r\n\r\n    const addCityToState = (city) => {\r\n        dispatch(addCity(city, citiesLength))\r\n        setSearchValue(\"\")\r\n        debugger\r\n        history.push(`/${city.name}`)\r\n    }\r\n\r\n    const addCityToLocalStorage = (cityName) => {\r\n        let myCities = JSON.parse(window.localStorage.getItem(\"cities\"))\r\n        myCities.push(cityName)\r\n        window.localStorage.setItem(\"cities\", JSON.stringify(myCities))\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        searchCity()\r\n    }\r\n\r\n    const searchCity = () => {\r\n        setIsFetching(true)\r\n        currentWeatherAPI.getCurrentWeather(searchValue).then(response => {\r\n            if (response.data.cod === 200) {\r\n                addCityToState(response.data)\r\n                setSearchError(\"\")\r\n                addCityToLocalStorage(response.data.name)\r\n            }\r\n            setIsFetching(false)\r\n        }).catch(error => {\r\n            setSearchError(error.response.data.message)\r\n            setIsFetching(false)\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Form onSubmit={handleSubmit}>\r\n            <Form.Row>\r\n                <Col xs={5}>\r\n                    <FormControl\r\n                        placeholder=\"Enter city name\"\r\n                        value={searchValue}\r\n                        onChange={onSearchChange}\r\n                    />\r\n                </Col>\r\n                <Col>\r\n                    {isFetching\r\n                        ? <Button variant=\"success\" disabled>\r\n                            <Spinner\r\n                                as=\"span\"\r\n                                animation=\"border\"\r\n                                size=\"sm\"\r\n                                role=\"status\"\r\n                                aria-hidden=\"true\"\r\n                            />\r\n                        </Button>\r\n                        : <Button\r\n                            variant=\"success\"\r\n                            onClick={searchCity}\r\n                        >\r\n                            Add\r\n                        </Button>}\r\n                    {searchError && <span className=\"badge-danger\">{searchError}</span>}\r\n                </Col>\r\n            </Form.Row>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default Search;","import {Button, Card, Spinner} from \"react-bootstrap\";\r\nimport {useState} from \"react\";\r\nimport {useDispatch} from \"react-redux\";\r\nimport {removeCity, updateCity} from \"../../actions/actions\";\r\nimport {useHistory} from \"react-router\";\r\nimport {currentWeatherAPI} from \"../../api/api\";\r\n\r\nconst CityCard = (props) => {\r\n    const dispatch = useDispatch()\r\n    const [isFetching, setIsFetching] = useState(false)\r\n    const history = useHistory()\r\n\r\n    const removeCityFromLocalStorage = () => {\r\n        let myCities = JSON.parse(window.localStorage.getItem(\"cities\"))\r\n        let newList = myCities.filter(city => city !== props.name)\r\n        window.localStorage.setItem(\"cities\", JSON.stringify(newList))\r\n    }\r\n\r\n    const remCity = (event) => {\r\n        event.preventDefault()\r\n        dispatch(removeCity(props.name))\r\n        removeCityFromLocalStorage();\r\n        if (history.location.pathname === `/${props.name}`) {\r\n            history.push(\"/\")\r\n        }\r\n        console.log(window.localStorage)\r\n    }\r\n\r\n    const updateInfo = (event) => {\r\n        event.preventDefault()\r\n        setIsFetching(true)\r\n        currentWeatherAPI.getCurrentWeather(props.name)\r\n            .then(response => {\r\n                debugger\r\n                if (response.data.cod === 200) {\r\n                    dispatch(updateCity(response.data))\r\n                }\r\n                setIsFetching(false)\r\n            })\r\n\r\n    }\r\n\r\n    const city = props.cityData\r\n    const weather = city.weather[0]\r\n    const iconURL = \"http://openweathermap.org/img/w/\" + weather.icon + \".png\"\r\n\r\n    return (\r\n        <Card className=\"bg-info\">\r\n            <Card.Body>\r\n                <Card.Title>{city.name}</Card.Title>\r\n                {isFetching\r\n                    ? <Spinner animation=\"border\"/>\r\n                    : <>\r\n                        <Card.Subtitle className=\"mb-2\">\r\n                            {weather.main} in {city.name}\r\n                            <img src={iconURL} alt=\"weatherImg\"/>\r\n                        </Card.Subtitle>\r\n                        <Card.Text>\r\n                            temp: {city.main.temp}°С\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            feels like: {city.main.feels_like}°С\r\n                        </Card.Text>\r\n                        <Card.Text>\r\n                            wind speed: {city.wind.speed} m/s\r\n                        </Card.Text>\r\n                        <Button\r\n                            className=\"bg-info\"\r\n                            onClick={updateInfo}\r\n                        >\r\n                            Update\r\n                        </Button>\r\n                        <Button\r\n                            variant=\"danger\"\r\n                            onClick={remCity}\r\n                        >\r\n                            Remove\r\n                        </Button>\r\n                    </>}\r\n            </Card.Body>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default CityCard","import {useSelector} from \"react-redux\";\r\nimport {useParams} from \"react-router\";\r\n\r\nconst WeatherDisplay = () => {\r\n    const cityName = useParams().cityName\r\n\r\n    const weatherData = useSelector(state => {\r\n        return state.cities.cities.find(city => city.name === cityName)\r\n    })\r\n\r\n    return(\r\n        weatherData ?\r\n        <div>\r\n            <h2>Weather in {weatherData.name}</h2>\r\n            <p>temp: {weatherData.main.temp}°С</p>\r\n            <p>feels like: {weatherData.main.feels_like}°С</p>\r\n            <p>min: {weatherData.main.temp_min}°С</p>\r\n            <p>max: {weatherData.main.temp_max}°С</p>\r\n            <p>wind speed: {weatherData.wind.speed} m/s</p>\r\n            <p>humidity: {weatherData.main.humidity}%</p>\r\n        </div>\r\n            : <div>Please select a city</div>\r\n    )\r\n}\r\n\r\nexport default WeatherDisplay;","const HelloCodica = () => {\r\n    return (\r\n        <div>\r\n            <p>Hi! This component was rendered because you haven't selected any city yet.</p>\r\n            <p>Please use the search, if you want to check weather in your city</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HelloCodica;","import './App.css';\r\nimport \"bootstrap/dist/css/bootstrap.css\"\r\nimport {useEffect} from \"react\";\r\nimport {getCity} from \"./thunks/thunks\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {Col, Container, Nav, NavItem, Row} from \"react-bootstrap\";\r\nimport Search from \"./components/Search/Search\";\r\nimport CityCard from \"./components/CityCard/CityCard\";\r\nimport WeatherDisplay from \"./components/WeatherDisplay/WeatherDisplay\";\r\nimport HelloCodica from \"./components/HelloCodica/HelloCodica\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport {Redirect, Route, Switch} from \"react-router\";\r\n\r\n\r\nfunction App() {\r\n    const cities = useSelector(state => state.cities.cities)\r\n    const dispatch = useDispatch()\r\n\r\n    //saving order of city list\r\n    let myCities = []\r\n    !window.localStorage.getItem(\"cities\")\r\n        ? window.localStorage.setItem(\"cities\", JSON.stringify([]))\r\n        : myCities = JSON.parse(window.localStorage.getItem(\"cities\"))\r\n\r\n    const getCitiesFromLocalStorage = () => {\r\n        for (let i = 0; i < myCities.length; i++) {\r\n            let city = myCities[i]\r\n            dispatch(getCity(city, i))\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        getCitiesFromLocalStorage()\r\n    }, [])\r\n\r\n    return (\r\n        <div>\r\n            <Container>\r\n                <h2>Weather App</h2>\r\n                <Row className=\"justify-content-md-center\">\r\n                    <Col>\r\n                        <Search/>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs={4}>\r\n                        <h3>Your cities</h3>\r\n                        <Nav\r\n                            variant=\"pills\"\r\n                        >\r\n                            {cities\r\n                                .sort((a, b) => a.number - b.number)\r\n                                .map((city, index) => <NavItem key={index}>\r\n                                        <NavLink key={index} to={`${city.name}`}>\r\n                                            <CityCard\r\n                                                key={index}\r\n                                                name={city.name}\r\n                                                cityData={city}\r\n                                            />\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                )}\r\n                        </Nav>\r\n                    </Col>\r\n                    <Col xs={8}>\r\n                        <h3>Details</h3>\r\n                        <Switch>\r\n                            <Route path=\"/hello_codica\">\r\n                                <HelloCodica/>\r\n                            </Route>\r\n                            <Route path=\"/:cityName\">\r\n                                <WeatherDisplay/>\r\n                            </Route>\r\n                            <Route exact path=\"/\">\r\n                                <Redirect to={`${myCities[0] || \"/hello_codica\"}`}/>\r\n                            </Route>\r\n                        </Switch>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import {\r\n    ADD_CITY,\r\n    REMOVE_CITY,\r\n    UPDATE_CITY\r\n} from \"../constants/actionTypes\"\r\n\r\nconst initialState = {\r\n    cities: [],\r\n}\r\n\r\nexport const cities = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_CITY:\r\n            action.city.number = action.number\r\n            return {\r\n                ...state,\r\n                cities: [...state.cities, action.city],\r\n            }\r\n        case REMOVE_CITY:\r\n            return {\r\n                ...state,\r\n                cities: state.cities.filter(city => action.name !== city.name)\r\n            }\r\n        case UPDATE_CITY:\r\n            let cities = state.cities.map(city => {\r\n                if(city.name === action.city.name) {\r\n                    return action.city\r\n                }\r\n                return city\r\n            })\r\n            return {\r\n                ...state,\r\n                cities: cities\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import {combineReducers} from \"redux\";\r\nimport {cities} from \"./reducers/cities\";\r\n\r\nexport const reducer = combineReducers({\r\n    cities\r\n})","import {applyMiddleware, createStore} from \"redux\";\r\nimport {reducer} from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nexport const store = createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport {BrowserRouter as Router} from \"react-router-dom\";\r\nimport {Provider} from \"react-redux\";\r\nimport {store} from \"./store\"\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Router basename={process.env.PUBLIC_URL}>\r\n            <Provider store={store}>\r\n                <App/>\r\n            </Provider>\r\n        </Router>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}